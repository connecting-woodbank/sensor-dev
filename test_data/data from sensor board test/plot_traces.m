%% ABOUT
% Import data from csv file and plot.  The data is from bitscope and has
% been transposed and only channel 0,1 used.  Data is in the format: 

% trigger	1247	1247	1248	1248	1249	1249	1250	1250
% stamp	17:35:43	17:35:43	17:35:47	17:35:47	17:35:51	17:35:51	17:35:56	17:35:56
% channel	0	1	0	1	0	1	0	1
% index	1252	674	1253	675	1254	676	1255	677
% type	0	0	0	0	0	0	0	0
% delay	-0.0003514	-0.0003514	-0.0003514	-0.0003514	-0.0003514	-0.0003514	-0.0003514	-0.0003514
% factor	1	1	1	1	1	1	1	1
% rate	714290	714290	714290	714290	714290	714290	714290	714290
% count	1429	1429	1429	1429	1429	1429	1429	1429
% data	1.5812	1.5812	1.5812	1.6172	1.5812	1.5812	1.5812	1.5812
% 	1.5812	1.5992	1.5812	1.6172	1.5812	1.5812	1.5812	1.5992

% 4 figures are produced for the corresponding trigger events.  
% Channel format: 0 - SDA (blue), 1 - SCL (red)
%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Volumes/iMac Data/Documents/Dropbox/02 UNIVERSITY/50 Consultancy/UoM
%    REALabs/Kindling Trust/technical/test_data/data from sensor board
%    test/bitscope_data_1-transposed.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/10/28 11:15:57

%% Initialize variables.
filename = '/Volumes/iMac Data/Documents/Dropbox/02 UNIVERSITY/50 Consultancy/UoM REALabs/Kindling Trust/technical/test_data/data from sensor board test/bitscope_data_1-transposed.csv';
delimiter = ',';
startRow = 10;

%% Format string for each line of text:
%   column2: double (%f)
%	column3: double (%f)
%   column4: double (%f)
%	column5: double (%f)
%   column6: double (%f)
%	column7: double (%f)
%   column8: double (%f)
%	column9: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
Trig1_0 = dataArray{:, 1};
Trig1_1 = dataArray{:, 2};
Trig2_0 = dataArray{:, 3};
Trig2_1 = dataArray{:, 4};
Trig3_0 = dataArray{:, 5};
Trig3_1 = dataArray{:, 6};
Trig4_0 = dataArray{:, 7};
Trig4_1 = dataArray{:, 8};

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% PROCESS
rate = 1/714290; % from the file
T = zeros(length(Trig1_0),1);
for i = 1:length(T);
    T(i) = i* rate;
end

%1
figure
hold on
plot(T,Trig1_0)
plot(T,Trig1_1, 'r')
hold off
title('Trig1')

%2
figure
hold on
plot(T,Trig2_0)
plot(T,Trig2_1, 'r')
hold off
title('Trig2')

%3
figure
hold on
plot(T,Trig3_0)
plot(T,Trig3_1, 'r')
hold off
title('Trig3')

%4
figure
hold on
plot(T,Trig4_0)
plot(T,Trig4_1, 'r')
hold off
title('Trig4')




